package com.supermatech.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProductAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllPropertiesEquals(Product expected, Product actual) {
        assertProductAutoGeneratedPropertiesEquals(expected, actual);
        assertProductAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllUpdatablePropertiesEquals(Product expected, Product actual) {
        assertProductUpdatableFieldsEquals(expected, actual);
        assertProductUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAutoGeneratedPropertiesEquals(Product expected, Product actual) {
        assertThat(expected)
            .as("Verify Product auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableFieldsEquals(Product expected, Product actual) {
        assertThat(expected)
            .as("Verify Product relevant properties")
            .satisfies(e -> assertThat(e.getPro_name()).as("check pro_name").isEqualTo(actual.getPro_name()))
            .satisfies(e -> assertThat(e.getPro_description()).as("check pro_description").isEqualTo(actual.getPro_description()))
            .satisfies(e -> assertThat(e.getPro_price()).as("check pro_price").isEqualTo(actual.getPro_price()))
            .satisfies(e -> assertThat(e.getPro_quantity()).as("check pro_quantity").isEqualTo(actual.getPro_quantity()))
            .satisfies(e -> assertThat(e.getCatt_id()).as("check catt_id").isEqualTo(actual.getCatt_id()))
            .satisfies(e -> assertThat(e.getPro_date()).as("check pro_date").isEqualTo(actual.getPro_date()))
            .satisfies(e -> assertThat(e.getPro_promotion()).as("check pro_promotion").isEqualTo(actual.getPro_promotion()))
            .satisfies(e -> assertThat(e.getPro_mark()).as("check pro_mark").isEqualTo(actual.getPro_mark()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableRelationshipsEquals(Product expected, Product actual) {
        assertThat(expected)
            .as("Verify Product relationships")
            .satisfies(e -> assertThat(e.getSubCategory()).as("check subCategory").isEqualTo(actual.getSubCategory()));
    }
}
